@page "/"

@using System.Text
@using TodoListBlazorServerApp.Models
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory ClientFactory


<h1>Pending Todo (@todos.Count(t => !t.IsDone))</h1>

@if (@getTodosError)
{
    
}
<ul class="no-bullets">
    @foreach (var todo in todos)
    {
        <li class="mb-1">
            <input type="checkbox" @bind="todo.IsDone" />
            <input type="text" readonly @bind="todo.Title" />
            <input type="button" value="x" title="@todo.Id"
            @onclick="args => RemoveTodo(todo, args)" />
        </li>
    }
</ul>   



<div class="mb-2">
    <input @ref="todoText" @onkeyup="@OnKeyUp" @bind="newTodo"
           type="text"
           placeholder="Something todo" 
           required="required" />

@* <button @onclick="(() => AddNewTodo(new TodoItem{Title = newTodo, IsDone = false}))">Add Todo</button> *@    
<button @onclick="AddNewTodo">Add Todo</button>

</div>

<div class="mt-2">
    <span>Total Todo: @todos.Count</span>
</div>




@code {
    private string newTodo { get; set; }

    private const string EnterCode = "Enter";

    ElementReference todoText;

    private List<TodoItem>? todos = new();
    private bool getTodosError { get; set; } = false;
    private bool shouldRender { get; set; } = false;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodolist();
    }

    private async Task LoadTodolist()
    {

        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:5099/todos");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Todo");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            todos = await JsonSerializer.DeserializeAsync
                <List<TodoItem>>(responseStream);
            shouldRender = true;
        }
        else
        {
            getTodosError = true;
            shouldRender = false;
        }
    }

    private async void OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTodo))
        {
            await AddNewTodo();
        }
    }

    private async Task AddNewTodo()
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
            "https://localhost:5099/todos");

        var todoItemToAdd = new TodoItem { Title = newTodo, IsDone = false };
        var jsonContent = JsonSerializer.Serialize(todoItemToAdd);

        request.Content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Todo");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var addedTodo = await JsonSerializer.DeserializeAsync<TodoItem>(responseStream);

            todos.Add(new TodoItem
                {
                    //Id is a primary key
                    Title = addedTodo.Title,
                    IsDone = addedTodo.IsDone
                });

            shouldRender = true;

            this.newTodo = string.Empty;

            todoText.FocusAsync();
        }
        else
        {
            getTodosError = true;
        }     
    }

    private void RemoveTodo(TodoItem todo, MouseEventArgs args)
    {
        //var delTodo = todos.Where(t => t.Id.ToString() == todo.Id.ToString()).FirstOrDefault();
        if (todo != null)
        {
            todos.Remove(todo);
        }
    }
}